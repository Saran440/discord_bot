import discord
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv
from keep_alive import keep_alive  # Import Web Server
import os

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ TOKEN ‡∏à‡∏≤‡∏Å .env
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

# ‡πÄ‡∏õ‡∏¥‡∏î Intents
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ‡πÄ‡∏Å‡πá‡∏ö To-Do List
todo_list = []  # ‡πÄ‡∏ä‡πà‡∏ô {"task": "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "assigned": None, "done": False}

class TaskView(discord.ui.View):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏≤‡∏ô"""
    def __init__(self):
        super().__init__(timeout=None)
        self.update_buttons()

    def update_buttons(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Task"""
        self.clear_items()  # ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        for idx, task in enumerate(todo_list):
            # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            button_done = discord.ui.Button(
                label=f"{'‚úÖ ' if task['done'] else ''}{task['task']}",
                custom_id=f"toggle_{idx}",
                style=discord.ButtonStyle.green if task["done"] else discord.ButtonStyle.secondary,
                row=idx
            )
            button_done.callback = self.toggle_task
            self.add_item(button_done)

            # ‡∏õ‡∏∏‡πà‡∏° Assign ‡∏á‡∏≤‡∏ô
            button_assign = discord.ui.Button(
                label="üéØ Assign",
                custom_id=f"assign_{idx}",
                style=discord.ButtonStyle.blurple,
                row=idx
            )
            button_assign.callback = self.assign_task
            self.add_item(button_assign)

    async def toggle_task(self, interaction: discord.Interaction):
        """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Task ‡πÄ‡∏°‡∏∑‡πà‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°"""
        idx = int(interaction.data["custom_id"].split("_")[1])
        todo_list[idx]["done"] = not todo_list[idx]["done"]

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡∏°‡πà
        new_view = TaskView()
        await interaction.response.edit_message(embed=self.create_embed(), view=new_view)

    async def assign_task(self, interaction: discord.Interaction):
        """Assign ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°"""
        idx = int(interaction.data["custom_id"].split("_")[1])
        user = interaction.user

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Assigned
        todo_list[idx]["assigned"] = user.id
        todo_list[idx]["assigned_name"] = user.name

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡∏°‡πà
        new_view = TaskView()
        await interaction.response.edit_message(embed=self.create_embed(), view=new_view)

    def create_embed(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏™‡∏î‡∏á To-Do List"""
        embed = discord.Embed(title="üìå To-Do List", color=discord.Color.blue())
        for idx, task in enumerate(todo_list):
            status = "‚úÖ" if task["done"] else "[ ]"
            assigned = f"üìå {task['assigned_name']}" if task["assigned"] else "‚ö° *Not Assigned*"
            embed.add_field(name=f"{idx+1}. {task['task']}", value=f"{status} {assigned}", inline=False)
        return embed


@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Synced {len(synced)} commands.")
    except Exception as e:
        print(f"‚ùå Error syncing commands: {e}")


@bot.tree.command(name="add_task", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ To-Do List ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Assign")
async def add_task(interaction: discord.Interaction, task: str):
    """‡πÄ‡∏û‡∏¥‡πà‡∏° Task ‡πÉ‡∏´‡∏°‡πà"""
    await interaction.response.defer()
    todo_list.append({"task": task, "assigned": None, "assigned_name": None, "done": False})
    await interaction.followup.send(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: **{task}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")


@bot.tree.command(name="show_tasks", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà")
async def show_tasks(interaction: discord.Interaction):
    """‡πÅ‡∏™‡∏î‡∏á Task List"""
    await interaction.response.defer()
    if not todo_list:
        await interaction.followup.send("üìå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥!", ephemeral=True)
    else:
        embed = TaskView().create_embed()
        await interaction.followup.send(embed=embed, view=TaskView())

@bot.event
async def on_message(message):
    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏à‡∏≤‡∏Å API
    if message.author == bot.user and message.content.startswith("BOT_API: "):
        task = message.content.replace("BOT_API: ", "").strip()
        todo_list.append({"task": task, "assigned": None, "done": False})
        await message.channel.send(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: **{task}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
        return  # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Bot ‡∏ï‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á 

    await bot.process_commands(message)

keep_alive()
bot.run(TOKEN)
